
// Type: Ionic.Zlib.Tree


// Hacked by SystemAce

using System;

namespace Ionic.Zlib
{
  internal sealed class Tree
  {
    private static readonly int HEAP_SIZE = 2 * InternalConstants.L_CODES + 1;
    internal static readonly int[] ExtraLengthBits = new int[29]
    {
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      3,
      3,
      3,
      3,
      4,
      4,
      4,
      4,
      5,
      5,
      5,
      5,
      0
    };
    internal static readonly int[] ExtraDistanceBits = new int[30]
    {
      0,
      0,
      0,
      0,
      1,
      1,
      2,
      2,
      3,
      3,
      4,
      4,
      5,
      5,
      6,
      6,
      7,
      7,
      8,
      8,
      9,
      9,
      10,
      10,
      11,
      11,
      12,
      12,
      13,
      13
    };
    internal static readonly int[] extra_blbits = new int[19]
    {
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      2,
      3,
      7
    };
    internal static readonly sbyte[] bl_order = new sbyte[19]
    {
      (sbyte) 16,
      (sbyte) 17,
      (sbyte) 18,
      (sbyte) 0,
      (sbyte) 8,
      (sbyte) 7,
      (sbyte) 9,
      (sbyte) 6,
      (sbyte) 10,
      (sbyte) 5,
      (sbyte) 11,
      (sbyte) 4,
      (sbyte) 12,
      (sbyte) 3,
      (sbyte) 13,
      (sbyte) 2,
      (sbyte) 14,
      (sbyte) 1,
      (sbyte) 15
    };
    private static readonly sbyte[] _dist_code = new sbyte[512]
    {
      (sbyte) 0,
      (sbyte) 1,
      (sbyte) 2,
      (sbyte) 3,
      (sbyte) 4,
      (sbyte) 4,
      (sbyte) 5,
      (sbyte) 5,
      (sbyte) 6,
      (sbyte) 6,
      (sbyte) 6,
      (sbyte) 6,
      (sbyte) 7,
      (sbyte) 7,
      (sbyte) 7,
      (sbyte) 7,
      (sbyte) 8,
      (sbyte) 8,
      (sbyte) 8,
      (sbyte) 8,
      (sbyte) 8,
      (sbyte) 8,
      (sbyte) 8,
      (sbyte) 8,
      (sbyte) 9,
      (sbyte) 9,
      (sbyte) 9,
      (sbyte) 9,
      (sbyte) 9,
      (sbyte) 9,
      (sbyte) 9,
      (sbyte) 9,
      (sbyte) 10,
      (sbyte) 10,
      (sbyte) 10,
      (sbyte) 10,
      (sbyte) 10,
      (sbyte) 10,
      (sbyte) 10,
      (sbyte) 10,
      (sbyte) 10,
      (sbyte) 10,
      (sbyte) 10,
      (sbyte) 10,
      (sbyte) 10,
      (sbyte) 10,
      (sbyte) 10,
      (sbyte) 10,
      (sbyte) 11,
      (sbyte) 11,
      (sbyte) 11,
      (sbyte) 11,
      (sbyte) 11,
      (sbyte) 11,
      (sbyte) 11,
      (sbyte) 11,
      (sbyte) 11,
      (sbyte) 11,
      (sbyte) 11,
      (sbyte) 11,
      (sbyte) 11,
      (sbyte) 11,
      (sbyte) 11,
      (sbyte) 11,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 0,
      (sbyte) 0,
      (sbyte) 16,
      (sbyte) 17,
      (sbyte) 18,
      (sbyte) 18,
      (sbyte) 19,
      (sbyte) 19,
      (sbyte) 20,
      (sbyte) 20,
      (sbyte) 20,
      (sbyte) 20,
      (sbyte) 21,
      (sbyte) 21,
      (sbyte) 21,
      (sbyte) 21,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 28,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29,
      (sbyte) 29
    };
    internal static readonly sbyte[] LengthCode = new sbyte[256]
    {
      (sbyte) 0,
      (sbyte) 1,
      (sbyte) 2,
      (sbyte) 3,
      (sbyte) 4,
      (sbyte) 5,
      (sbyte) 6,
      (sbyte) 7,
      (sbyte) 8,
      (sbyte) 8,
      (sbyte) 9,
      (sbyte) 9,
      (sbyte) 10,
      (sbyte) 10,
      (sbyte) 11,
      (sbyte) 11,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 12,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 13,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 14,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 15,
      (sbyte) 16,
      (sbyte) 16,
      (sbyte) 16,
      (sbyte) 16,
      (sbyte) 16,
      (sbyte) 16,
      (sbyte) 16,
      (sbyte) 16,
      (sbyte) 17,
      (sbyte) 17,
      (sbyte) 17,
      (sbyte) 17,
      (sbyte) 17,
      (sbyte) 17,
      (sbyte) 17,
      (sbyte) 17,
      (sbyte) 18,
      (sbyte) 18,
      (sbyte) 18,
      (sbyte) 18,
      (sbyte) 18,
      (sbyte) 18,
      (sbyte) 18,
      (sbyte) 18,
      (sbyte) 19,
      (sbyte) 19,
      (sbyte) 19,
      (sbyte) 19,
      (sbyte) 19,
      (sbyte) 19,
      (sbyte) 19,
      (sbyte) 19,
      (sbyte) 20,
      (sbyte) 20,
      (sbyte) 20,
      (sbyte) 20,
      (sbyte) 20,
      (sbyte) 20,
      (sbyte) 20,
      (sbyte) 20,
      (sbyte) 20,
      (sbyte) 20,
      (sbyte) 20,
      (sbyte) 20,
      (sbyte) 20,
      (sbyte) 20,
      (sbyte) 20,
      (sbyte) 20,
      (sbyte) 21,
      (sbyte) 21,
      (sbyte) 21,
      (sbyte) 21,
      (sbyte) 21,
      (sbyte) 21,
      (sbyte) 21,
      (sbyte) 21,
      (sbyte) 21,
      (sbyte) 21,
      (sbyte) 21,
      (sbyte) 21,
      (sbyte) 21,
      (sbyte) 21,
      (sbyte) 21,
      (sbyte) 21,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 22,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 23,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 24,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 25,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 26,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 27,
      (sbyte) 28
    };
    internal static readonly int[] LengthBase = new int[29]
    {
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      10,
      12,
      14,
      16,
      20,
      24,
      28,
      32,
      40,
      48,
      56,
      64,
      80,
      96,
      112,
      128,
      160,
      192,
      224,
      0
    };
    internal static readonly int[] DistanceBase = new int[30]
    {
      0,
      1,
      2,
      3,
      4,
      6,
      8,
      12,
      16,
      24,
      32,
      48,
      64,
      96,
      128,
      192,
      256,
      384,
      512,
      768,
      1024,
      1536,
      2048,
      3072,
      4096,
      6144,
      8192,
      12288,
      16384,
      24576
    };
    internal const int Buf_size = 16;
    internal short[] dyn_tree;
    internal int max_code;
    internal StaticTree staticTree;

    internal static int DistanceCode(int dist)
    {
      if (dist >= 256)
        return (int) Tree._dist_code[256 + SharedUtils.URShift(dist, 7)];
      return (int) Tree._dist_code[dist];
    }

    internal void gen_bitlen(DeflateManager s)
    {
      short[] numArray1 = this.dyn_tree;
      short[] numArray2 = this.staticTree.treeCodes;
      int[] numArray3 = this.staticTree.extraBits;
      int num1 = this.staticTree.extraBase;
      int index1 = this.staticTree.maxLength;
      int num2 = 0;
      for (int index2 = 0; index2 <= InternalConstants.MAX_BITS; ++index2)
        s.bl_count[index2] = (short) 0;
      numArray1[s.heap[s.heap_max] * 2 + 1] = (short) 0;
      int index3;
      for (index3 = s.heap_max + 1; index3 < Tree.HEAP_SIZE; ++index3)
      {
        int num3 = s.heap[index3];
        int index2 = (int) numArray1[(int) numArray1[num3 * 2 + 1] * 2 + 1] + 1;
        if (index2 > index1)
        {
          index2 = index1;
          ++num2;
        }
        numArray1[num3 * 2 + 1] = (short) index2;
        if (num3 <= this.max_code)
        {
          ++s.bl_count[index2];
          int num4 = 0;
          if (num3 >= num1)
            num4 = numArray3[num3 - num1];
          short num5 = numArray1[num3 * 2];
          s.opt_len += (int) num5 * (index2 + num4);
          if (numArray2 != null)
            s.static_len += (int) num5 * ((int) numArray2[num3 * 2 + 1] + num4);
        }
      }
      if (num2 == 0)
        return;
      do
      {
        int index2 = index1 - 1;
        while ((int) s.bl_count[index2] == 0)
          --index2;
        --s.bl_count[index2];
        s.bl_count[index2 + 1] = (short) ((int) s.bl_count[index2 + 1] + 2);
        --s.bl_count[index1];
        num2 -= 2;
      }
      while (num2 > 0);
      for (int index2 = index1; index2 != 0; --index2)
      {
        int num3 = (int) s.bl_count[index2];
        while (num3 != 0)
        {
          int num4 = s.heap[--index3];
          if (num4 <= this.max_code)
          {
            if ((int) numArray1[num4 * 2 + 1] != index2)
            {
              s.opt_len = (int) ((long) s.opt_len + ((long) index2 - (long) numArray1[num4 * 2 + 1]) * (long) numArray1[num4 * 2]);
              numArray1[num4 * 2 + 1] = (short) index2;
            }
            --num3;
          }
        }
      }
    }

    internal void build_tree(DeflateManager s)
    {
      short[] tree = this.dyn_tree;
      short[] numArray1 = this.staticTree.treeCodes;
      int num1 = this.staticTree.elems;
      int max_code = -1;
      s.heap_len = 0;
      s.heap_max = Tree.HEAP_SIZE;
      for (int index = 0; index < num1; ++index)
      {
        if ((int) tree[index * 2] != 0)
        {
          s.heap[++s.heap_len] = max_code = index;
          s.depth[index] = (sbyte) 0;
        }
        else
          tree[index * 2 + 1] = (short) 0;
      }
      while (s.heap_len < 2)
      {
        int[] numArray2 = s.heap;
        int index1 = ++s.heap_len;
        int num2;
        if (max_code >= 2)
          num2 = 0;
        else
          max_code = num2 = max_code + 1;
        int num3 = num2;
        numArray2[index1] = num2;
        int index2 = num3;
        tree[index2 * 2] = (short) 1;
        s.depth[index2] = (sbyte) 0;
        --s.opt_len;
        if (numArray1 != null)
          s.static_len -= (int) numArray1[index2 * 2 + 1];
      }
      this.max_code = max_code;
      for (int k = s.heap_len / 2; k >= 1; --k)
        s.pqdownheap(tree, k);
      int index3 = num1;
      do
      {
        int index1 = s.heap[1];
        s.heap[1] = s.heap[s.heap_len--];
        s.pqdownheap(tree, 1);
        int index2 = s.heap[1];
        s.heap[--s.heap_max] = index1;
        s.heap[--s.heap_max] = index2;
        tree[index3 * 2] = (short) ((int) tree[index1 * 2] + (int) tree[index2 * 2]);
        s.depth[index3] = (sbyte) ((int) Math.Max((byte) s.depth[index1], (byte) s.depth[index2]) + 1);
        tree[index1 * 2 + 1] = tree[index2 * 2 + 1] = (short) index3;
        s.heap[1] = index3++;
        s.pqdownheap(tree, 1);
      }
      while (s.heap_len >= 2);
      s.heap[--s.heap_max] = s.heap[1];
      this.gen_bitlen(s);
      Tree.gen_codes(tree, max_code, s.bl_count);
    }

    internal static void gen_codes(short[] tree, int max_code, short[] bl_count)
    {
      short[] numArray = new short[InternalConstants.MAX_BITS + 1];
      short num = (short) 0;
      for (int index = 1; index <= InternalConstants.MAX_BITS; ++index)
        numArray[index] = num = (short) ((int) num + (int) bl_count[index - 1] << 1);
      for (int index = 0; index <= max_code; ++index)
      {
        int len = (int) tree[index * 2 + 1];
        if (len != 0)
          tree[index * 2] = (short) Tree.bi_reverse((int) numArray[len]++, len);
      }
    }

    internal static int bi_reverse(int code, int len)
    {
      int num1 = 0;
      do
      {
        int num2 = num1 | code & 1;
        code >>= 1;
        num1 = num2 << 1;
      }
      while (--len > 0);
      return num1 >> 1;
    }
  }
}
